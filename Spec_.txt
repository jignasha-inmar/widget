Spec:
Using AngularJS as the Javascript framework (with ui-router for views management, and angular-ui bootstrap for bootstrap directives), 
and Twitter Bootstrap as the CSS framework, code a “widget” manager.
 
The Widget Manager will have a homepage and an add/edit page.  
 
The homepage view should contain two “views” (ui-router terminology).  The views are:
  - widget summary
  - widget detail
The homepage url will be /#/ (localhost:3000/#/) and will only display the summary, a list of widget names. 
Next to each name will be two buttons: “details", and “remove".  This summary should be located on the left half of the screen. 
To the bottom left of the summary should be an “add” button which is discussed below. 
If a user clicks on the details button, 
the url will change to /#/[widgetID], and display the widget details on the right half of the screen. 
If a user clicks on the remove button, they will be prompted with a bootstrap dialog confirmation. 
Upon confirmation, the widget will be deleted from the summary.  
 
The details half of the page will display the widget name in bold, the “value” of the widget in text
(ie. two thousand seven hundred fifty three) and a list of key/value pairs that comprise the widget.  
To the bottom right of the details will be an “edit” button.
 
Clicking on the “add” or “edit" button will take the user to a new main view (/#/edit, /#/edit/[widgetID] respectively). 
This will show a view of text fields.  The top most text field should be a place to enter the widget name. 
Under the widget name should be a text field to add a “value” as an integer (ie. 2753).  
Under the “value" text field should be paired text fields for the key/value pairs that will be stored in this widget. 
Show 5 key/value text field pairs by default.  To the bottom right of the text fields is a save button,
which will add the widget to the list of widgets in the summary. 
Please note that you will be responsible for generating the ids for each widget.
 
Please store the widgets in either a cookie, or local storage.
 
*extra credits: 
- have an “x” button on the top right of the details view to clear the view from the screen.
- make sure all widget names are unique (if not, show a bootstrap error alert)
- if there is an error in the key/value pairs (empty key), disable the save button, and highlight the empty key text field
- make the number of key/value text field pairs dynamic: next to each key/value pair text fields will be either a minus button, 
a plus button, or both for adding and removing key/value pairs while editing. 
(For example, in add, there will be one key/value text fields pair with a plus button. 
Once the plus button is clicked and a new pair of key/value text fields is present, 
the first plus will change to a minus, and the second will contain a plus and minus)
 
As a hint:
ui-router has the ability to apply multiple views inside of a view.  
For example, you can have a <div ui-view=“main”></div>, 
and the template that you apply to this “main” view can have within it <div ui-view=“summary”></div><div ui-view=“details”></div>, 
or a different view can set the main template to have <div ui-view=“edit”></div>.
This is all handled via the $stateProvider in the module config using ui-router nested views.